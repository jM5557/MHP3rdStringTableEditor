{"version":3,"sources":["file-context.js","components/file-import.js","components/top-controls.js","lib/copy-to-clipboard.js","lib/convert-text.js","components/quest-details-form.js","components/quest-edit-form.js","components/quest-content.js","components/file-content.js","components/layouts/large-view-layout.js","components/layouts/multi-view-layout.js","App.js","serviceWorker.js","index.js"],"names":["FileContext","createContext","FileProvider","props","addFile","file","files","state","push","id","ids","setState","setViewMode","viewMode","deleteFile","fileIndex","findIndex","q","splice","length","console","log","selectedFile","updateFile","updateFileDetails","details","editable","setSelectedFile","viewSelectedFile","clearAllFiles","Provider","value","this","children","Component","FileImport","filesLoaded","filesLoadedSuccess","displayFilesLoadedSuccessMessage","doNotDisplayMessage","window","setTimeout","loadFiles","document","getElementById","Array","from","map","index","fileReader","FileReader","onload","event","data","target","result","lines","split","payload","file_type","title","fail_condition","monsters","client","fileData","original","file_name","name","context","readAsText","updateFileList","className","htmlFor","type","onChange","multiple","onClick","contextType","TopControls","useContext","bind","str","prop","Object","prototype","hasOwnProperty","call","copy","convertArrayToFormattedText","arr","text","filter","line","convertTextWithoutNewlineToArray","lineLength","maxLineCount","lengthPattern","RegExp","match","slice","convertDetailsToArray","indexOf","convertTextWithNewlineToArray","convertTextToFormattedText","currentLine","i","QuestDetailsForm","addNewLineAtEnd","preventDefault","handleAddNewLineAtPos","pos","addNewLineAtPos","deleteLine","detailsAsText","updateDetailValue","handleImportedDetailsTextField","importedDetailsText","loadDetailsText","copyToClipboard","changeViewMode","renderInputBoxes","key","onFocus","prevProps","FileEditForm","editInputField","propToEdit","quest","FileContent","content","LargeViewLayout","setSelectedItem","item","selectedItem","stopPropagation","nextFile","resetQuestData","renderListItems","viewOriginal","MultiViewLayout","renderFilePreviews","App","Content","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cd21293.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nexport const FileContext = createContext();\r\n\r\nexport class FileProvider extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            files: [],\r\n            ids: 0,\r\n\r\n            selectedFile: null,\r\n            viewMode: 'SINGLE',\r\n            \r\n            addFile: this.addFile,\r\n            updateFile: this.updateFile,\r\n            updateFileDetails: this.updateFileDetails,\r\n            deleteFile: this.deleteFile,\r\n            clearAllFiles: this.clearAllFiles,\r\n\r\n            setViewMode: this.setViewMode,\r\n            setSelectedFile: this.setSelectedFile,\r\n            viewSelectedFile: this.viewSelectedFile\r\n\r\n        }\r\n    }\r\n\r\n    addFile = (file) => {\r\n        let files = [...this.state.files];\r\n        files.push({id: this.state.ids + 1, ...file});\r\n\r\n        this.setState({\r\n            files: files,\r\n            ids: this.state.ids + 1\r\n        });\r\n    }\r\n\r\n    setViewMode = (viewMode) => {\r\n        this.setState({\r\n            viewMode: viewMode\r\n        })\r\n    }\r\n\r\n    deleteFile = (file) => {\r\n        let files = [...this.state.files];\r\n        let fileIndex = files.findIndex( q => q.id === file.id);\r\n\r\n        files.splice(fileIndex, 1);\r\n\r\n        if (files.length > 0) {\r\n\r\n            console.log(fileIndex + \"/\" + files.length);\r\n\r\n            if (fileIndex === files.length) {\r\n                this.setState({\r\n                    files: files,\r\n                    selectedFile: files[fileIndex - 1]\r\n                });\r\n    \r\n                return files[fileIndex - 1];\r\n            }\r\n            \r\n            this.setState({\r\n                files: files,\r\n                selectedFile: files[fileIndex]\r\n            });\r\n\r\n            return files[fileIndex];\r\n        }\r\n\r\n        this.setState({\r\n            files: [],\r\n            selectedFile: null\r\n        });\r\n\r\n        return null;\r\n    }\r\n\r\n    updateFile = (file) => {\r\n        let files = [...this.state.files];\r\n        let fileIndex = files.findIndex( q => q.id === file.id);\r\n\r\n        files[fileIndex] = file;\r\n\r\n        this.setState({\r\n            files: files\r\n        });\r\n    }\r\n\r\n    updateFileDetails = (details, file) => {\r\n        file.editable.details = details;\r\n\r\n        this.updateFile(file);\r\n    }\r\n\r\n    setSelectedFile = (file) => {\r\n        this.setState({\r\n            selectedFile: file,\r\n            viewMode: 'SINGLE'\r\n        });\r\n    }\r\n\r\n    viewSelectedFile = (file) => {\r\n        this.setSelectedFile(file);\r\n    }\r\n\r\n    clearAllFiles = () => {\r\n        this.setState({\r\n            files: [],\r\n            ids: 0,\r\n\r\n            selectedFile: null\r\n        })\r\n    }\r\n        \r\n    render () {\r\n        return (\r\n            <FileContext.Provider value = {this.state}>\r\n                {this.props.children}\r\n            </FileContext.Provider>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { FileContext } from '../file-context';\r\n\r\nimport './file-import.scss';\r\n\r\nclass FileImport extends Component {\r\n    static contextType = FileContext;\r\n\r\n    state = {\r\n        filesLoaded: [],\r\n        filesLoadedSuccess: false\r\n    }\r\n\r\n    displayFilesLoadedSuccessMessage = () => {\r\n        if (this.props.doNotDisplayMessage){\r\n            return;\r\n        }\r\n        \r\n        this.setState({\r\n            filesLoadedSuccess: true\r\n        });\r\n\r\n        window.setTimeout(() => {\r\n            this.setState({\r\n                filesLoadedSuccess: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    loadFiles = () => {\r\n        let files = document.getElementById(\"file-import\").files;\r\n    \r\n        Array.from(files).map((file, index) => {\r\n          let fileReader = new FileReader();\r\n    \r\n          fileReader.onload = (event) => {\r\n            let data = event.target.result;\r\n    \r\n            const lines = data.split(/\\r\\n|\\n/);\r\n\r\n            let payload = data;\r\n            let file_type = \"DATA\";\r\n\r\n            if (lines.length === 6 || lines.length === 7) {\r\n                payload = {\r\n                  title: lines[0],\r\n                  target: lines[1],\r\n                  fail_condition: lines[2],\r\n                  details: lines[3],\r\n                  monsters: lines[4],\r\n                  client: lines[5]\r\n                }\r\n\r\n                file_type = \"QUEST\";\r\n            }\r\n\r\n            let fileData = {\r\n                editable: payload,\r\n                original: {...payload},\r\n                file_name: file.name,\r\n                file_type: file_type\r\n            }\r\n            \r\n            this.context.addFile(fileData);\r\n\r\n            if (index === this.state.filesLoaded.length - 1) {\r\n                this.displayFilesLoadedSuccessMessage();\r\n            }\r\n          }\r\n          \r\n          fileReader.readAsText(file, \"UTF-8\");\r\n        });\r\n    }\r\n\r\n    updateFileList = (event) => {\r\n        let files = event.target.files;\r\n\r\n        this.setState({\r\n            filesLoaded: files\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"file-import\">\r\n                { (this.state.filesLoadedSuccess) &&\r\n                    <span className = \"files-loaded success\">Files Loaded!</span>\r\n                }\r\n                <label htmlFor = \"file-import\" className = \"file-import-inner\">\r\n                    <input \r\n                        type = \"file\" \r\n                        id = \"file-import\" \r\n                        onChange = { this.updateFileList }\r\n                        multiple \r\n                    />\r\n                    Upload Text Files: { this.state.filesLoaded.length } File(s)\r\n                </label>\r\n                { this.state.filesLoaded.length > 0 &&\r\n                    <button onClick = { this.loadFiles }>\r\n                        Import\r\n                    </button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileImport;","import React, { useContext } from 'react';\r\nimport { FileContext } from '../file-context';\r\nimport FileImport from './file-import';\r\n\r\nimport './top-controls.scss';\r\n\r\nexport const TopControls = () => {\r\n    let context = useContext(FileContext);\r\n    \r\n    return (\r\n        <div className = \"top-controls\">\r\n            <div>\r\n                <span className = \"files-loaded\">{ context.files.length } file(s)</span>\r\n                { (context.files.length > 0 && context.viewMode === 'SINGLE') &&\r\n                    <button \r\n                        onClick = { context.setViewMode.bind(this, 'MULTI') }\r\n                        className = \"view-btn\"\r\n                    >\r\n                        View All Files\r\n                    </button>\r\n                }\r\n            </div>\r\n\r\n            <div className = \"side-controls right\">\r\n                <FileImport />\r\n\r\n                { (context.files.length > 0) &&\r\n                    <button className = \"delete-all-btn\" onClick = {context.clearAllFiles}>\r\n                    Delete All Files\r\n                    </button>\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","import copy from \"copy-to-clipboard\";\r\n\r\nexport default (data) => {\r\n    let str = \"\";\r\n\r\n    if (typeof data === \"string\") {\r\n        str = data\r\n    } else {\r\n        for (let prop in data) {\r\n            if (Object.prototype.hasOwnProperty.call(data, prop)) {\r\n                str += data[prop] + \"\\n\";\r\n            }\r\n        }\r\n    }\r\n\r\n    copy(str);\r\n}","export const convertArrayToFormattedText = (arr) => {\r\n    let text = \"\";\r\n\r\n    arr.filter( (line) => line.length > 0 ).map( (line, index) => {\r\n        if (arr.length > 0 && index > 0) {\r\n            text += \"<NEWLINE>\";\r\n        }\r\n\r\n        text += line;\r\n    });\r\n\r\n    return text;\r\n}\r\n\r\nlet convertTextWithoutNewlineToArray = (str, lineLength, maxLineCount) => {\r\n    let lengthPattern = new RegExp(\".{1,\" + lineLength + \"}\", \"g\");\r\n    let lines = str.match(lengthPattern) || [];\r\n\r\n    return lines.slice(0, maxLineCount);\r\n}\r\n\r\nlet convertTextWithNewlineToArray = (str, lineLength) => {\r\n    let lines = str.split(\"<NEWLINE>\");\r\n\r\n    lines = lines.map( (line) => {\r\n        return line.slice(0, lineLength);\r\n    });\r\n\r\n    return lines;\r\n}\r\n\r\nexport const convertDetailsToArray = (str, lineLength, maxLineCount) => {\r\n    if (str.indexOf(\"<NEWLINE>\") > -1)\r\n        return convertTextWithNewlineToArray(str, lineLength);\r\n    \r\n    return convertTextWithoutNewlineToArray(str, lineLength, maxLineCount);\r\n}\r\n\r\nexport const convertTextToFormattedText = (str, lineLength, maxLineCount) => {\r\n    if (str.indexOf(\"<NEWLINE>\") > -1)\r\n        return str;\r\n    \r\n    // Add <NEWLINE> if there is none\r\n    let lines = convertTextWithoutNewlineToArray(str, lineLength, maxLineCount);\r\n    let currentLine = \"\";\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        if (i > 0) {\r\n            currentLine += \"<NEWLINE>\";\r\n        }\r\n        \r\n        currentLine += lines[i];\r\n    }\r\n\r\n    return currentLine;\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport './quest-details-form.scss';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\nimport { convertArrayToFormattedText, convertTextToFormattedText, convertDetailsToArray } from '../lib/convert-text';\r\n\r\nclass QuestDetailsForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            details: this.props.data \r\n                        ? convertDetailsToArray(this.props.data.editable.details, 30, 7) \r\n                        : [],\r\n            detailsAsText: this.props.data.editable \r\n                            ? this.props.data.editable.details \r\n                            : \"\",\r\n            importedDetailsText: \"\",\r\n\r\n            currentLine: -1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.data.id !== prevProps.data.id) {\r\n\r\n        let lines = this.props.data.editable.details.split(\"<NEWLINE>\");\r\n\r\n        lines = lines.map( (line) => {\r\n            return line.slice(0, 30);\r\n        });\r\n\r\n        this.props.updateFile(this.state.detailsAsText, prevProps.data);\r\n\r\n        this.setState({\r\n          details: lines,\r\n          detailsAsText: this.props.data.editable.details\r\n        });\r\n      }\r\n    }\r\n\r\n    addNewLineAtEnd = (event) => {\r\n        event.preventDefault();\r\n        \r\n        let details = [...this.state.details];\r\n\r\n        details.push(\"\");\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    handleAddNewLineAtPos = (pos, event) => {\r\n        event.preventDefault();\r\n\r\n        this.addNewLineAtPos(pos)\r\n    }\r\n\r\n    addNewLineAtPos = (pos) => {\r\n\r\n        if (this.state.details.length === 7) {\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(pos + 1, 0, \"\");\r\n\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    deleteLine = (index, event) => {\r\n        event.preventDefault();\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(index, 1);\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: convertArrayToFormattedText(details),\r\n            currentLine: -1\r\n        });\r\n    }\r\n\r\n    updateDetailValue = (index, event) => {\r\n        if (event.target.value.length > 30){\r\n            if (this.state.currentLine < 7 \r\n                && this.state.details[this.state.currentLine + 1] !== \"\")\r\n                this.addNewLineAtPos(this.state.currentLine);\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details[index] = event.target.value;\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: convertArrayToFormattedText(details)\r\n        });\r\n\r\n        this.props.updateFile(this.state.detailsAsText, this.props.data);\r\n\r\n    }\r\n\r\n    handleImportedDetailsTextField = (event) => {\r\n        this.setState({\r\n            importedDetailsText: event.target.value\r\n        });\r\n    }\r\n\r\n    loadDetailsText = () => {\r\n        this.setState({\r\n            details: convertDetailsToArray(this.state.importedDetailsText, 30, 7),\r\n            detailsAsText: convertTextToFormattedText(this.state.importedDetailsText, 30, 7)\r\n        });\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        copyToClipboard({...this.props.data.editable, details: this.state.detailsAsText});\r\n    }\r\n    \r\n    changeViewMode = () => {\r\n        this.props.viewSelectedFile({\r\n                                        ...this.props.data, \r\n                                        editable: {\r\n                                                    ...this.props.data.editable, \r\n                                                    details: this.state.detailsAsText\r\n                                                  }\r\n                                    });\r\n    }\r\n\r\n    renderInputBoxes = () => {\r\n        return this.state.details.map( (line, index) => {\r\n\r\n            return (\r\n                <label key = {index}>\r\n                    <input\r\n                        type = \"text\" \r\n                        onClick = { () => { this.setState({ currentLine: index }) } }\r\n                        onFocus = { () => { this.setState({ currentLine: index }) } }\r\n                        onChange = {this.updateDetailValue.bind(this, index)} \r\n                        value = {this.state.details[index]}\r\n                    />\r\n                    <div className = \"bottom-controls\">\r\n                        <span className = \"character-counter\">{this.state.details[index].length + \"/30\" }</span>\r\n                        \r\n                        <div className = \"side-controls\">\r\n                            { (this.state.details.length < 7 && this.state.currentLine === index) && \r\n                                <button \r\n                                    onClick = {this.handleAddNewLineAtPos.bind(this, index)}\r\n                                    className = \"add-line-below\"\r\n                                >\r\n                                    Add Line Below\r\n                                </button>\r\n                            }\r\n\r\n                            <button \r\n                                className = \"delete-btn\" \r\n                                onClick = {this.deleteLine.bind(this, index)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </label>\r\n            );\r\n\r\n        });\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className = { (this.props.viewMode === \"MULTI\") \r\n                                ? \"quest-details-form multi\" \r\n                                : \"quest-details-form\"\r\n                            }>\r\n                { (this.props.viewMode === \"MULTI\") &&\r\n                    <div className = \"top-bar\">\r\n                        <div className = \"title\">\r\n                            { this.props.data.editable.title }\r\n                        </div>\r\n                    \r\n                        <div className = \"bottom-details\">\r\n                            <span className = \"file-name\">{this.props.data.file_name}</span>\r\n                            <div className = \"side-controls\">\r\n                            \r\n                                    <Fragment>\r\n                                        <button onClick = { this.changeViewMode }>\r\n                                            Edit File\r\n                                        </button>\r\n\r\n                                        <button \r\n                                            className = \"delete-btn\"\r\n                                            onClick = { this.props.deleteFile.bind(this, this.props.data) }\r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                    </Fragment>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                \r\n                <div className = \"space-between\">\r\n                    <div className = \"line-counter\">\r\n                        { this.state.details.length + \"/7\"} Lines\r\n                    </div>\r\n\r\n                    <div className = \"buttons-wrapper\">\r\n                        { (this.state.details.length < 7) &&\r\n                            (\r\n                                <button \r\n                                    className = \"add-line\" \r\n                                    onClick = { this.addNewLineAtEnd }\r\n                                >\r\n                                    Add Line\r\n                                </button>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <form className = \"details-input-boxes\">\r\n                    { this.renderInputBoxes() }\r\n                    \r\n                    { (this.state.details.length < 7) &&\r\n                        (\r\n                            <button \r\n                                className = \"add-line\" \r\n                                onClick = { this.addNewLineAtEnd }\r\n                            >\r\n                                Add Line\r\n                            </button>\r\n                        )\r\n                    }\r\n                </form>\r\n\r\n                <label className = \"load-quest-details\">\r\n                    <p>\r\n                        To edit existing file details text instead, simply copy & paste it into the box below:\r\n                    </p>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.handleImportedDetailsTextField } \r\n                        value = { this.state.importedDetailsText } \r\n                    />\r\n                    <button \r\n                        className = \"load-new-details\" \r\n                        onClick = { this.loadDetailsText }\r\n                    >\r\n                        Edit File Details\r\n                    </button>\r\n                </label>\r\n                \r\n                { this.state.detailsAsText.length > 0 && \r\n                    (\r\n                        <div className = \"plain-text-wrapper\">\r\n                            <code>\r\n                                {this.props.data.editable.title}\r\n                                    <br/>\r\n                                {this.props.data.editable.target}\r\n                                    <br/>\r\n                                {this.props.data.editable.fail_condition}\r\n                                    <br/>\r\n                                {this.state.detailsAsText}\r\n                                    <br/>\r\n                                {this.props.data.editable.monsters}\r\n                                    <br/>\r\n                                {this.props.data.editable.client}\r\n                            </code>\r\n\r\n                            <button className = \"copy-btn\" onClick = { this.copyToClipboard }>Copy</button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestDetailsForm;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './quest-details-form';\r\nimport {FileContext} from './../file-context';\r\n\r\nimport './quest-edit-form.scss';\r\nimport { throwStatement } from '@babel/types';\r\n\r\nclass FileEditForm extends Component {\r\n    static contextType = FileContext;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n\r\n        this.state = {\r\n            file: this.props.file\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.file.id !== this.state.file.id \r\n                || this.props.file.editable !== this.state.file.editable ) {\r\n            this.setState({\r\n                file: this.props.file\r\n            });\r\n        }\r\n    }\r\n\r\n    editInputField = (propToEdit, event) => {\r\n        let fileData = {...this.props.file};\r\n\r\n        fileData.editable[propToEdit] = event.target.value;\r\n\r\n        this.setState({\r\n            file: fileData\r\n        });\r\n\r\n        this.context.updateFile(fileData);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"file-form\">\r\n                <h1 className = \"top\">\r\n                    <span>Edit File</span> \r\n                    <span className = \"file-name\">{ this.state.file.file_name}</span>\r\n                </h1>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">File Title</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"title\")}\r\n                        value = { this.state.file.editable.title }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">File Target</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"target\")}\r\n                        value = { this.state.file.editable.target }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Fail Condition</div>\r\n                    <p>{ this.state.file.editable.fail_condition }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Monsters</div>\r\n                    <p>{ this.state.file.editable.monsters }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Client</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"client\")}\r\n                        value = { this.state.file.editable.client }\r\n                    />\r\n                </label>\r\n\r\n                <div className = \"field-name\">Quest Details</div>\r\n                <QuestDetailsForm\r\n                    data = { this.state.file }\r\n                    updateFile = { this.context.updateFileDetails }\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileEditForm;","import React from 'react';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\nimport './quest-content.scss';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className = \"quest-content\">\r\n            <h1 className = \"top\">\r\n                Original File\r\n            </h1>\r\n            <div className = \"item\">\r\n                <h1>Quest Title</h1>\r\n                <p>{ props.quest.title }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Quest Target</h1>\r\n                <p>{ props.quest.target }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Fail Condition</h1>\r\n                <p>{ props.quest.fail_condition }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Quest Details</h1>\r\n                <p>{ props.quest.details }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Monsters</h1>\r\n                <p>{ props.quest.monsters }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Client</h1>\r\n                <p>{ props.quest.client }</p>\r\n            </div>\r\n            \r\n            <div className = \"buttons\">\r\n                <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, props.quest) }>Copy</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\n\r\nimport './file-content.scss';\r\n\r\nexport const FileContent = (props) => {\r\n    let renderStringWithNewlines = (str) => {\r\n        return str.split(/\\r\\n|\\n/).map( (line, index) => {\r\n            return (<p key = {index}>{ line }</p>);\r\n        });\r\n    }\r\n    return (\r\n        <div className = \"file-content\">\r\n            <h1 className = \"top\">\r\n                <span>View File</span> \r\n                <span className = \"file-name\">\r\n                    { props.file_name}\r\n                </span>\r\n            </h1>\r\n\r\n            <code className = \"file-content-data\">\r\n               {renderStringWithNewlines(props.content)}\r\n            </code>\r\n            <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, props.content) }>\r\n                Copy\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { Component, Fragment } from 'react';\r\nimport './large-view-layout.scss';\r\nimport { TopControls } from './../top-controls';\r\nimport QuestEditForm from '../quest-edit-form';\r\nimport QuestContent from '../quest-content';\r\nimport { FileContext } from './../../file-context';\r\nimport copyToClipboard from '../../lib/copy-to-clipboard';\r\nimport { FileContent } from '../file-content';\r\n \r\nclass LargeViewLayout extends Component {\r\n\r\n    static contextType = FileContext;\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedItem: null,\r\n            viewOriginal: false\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.setState({\r\n            selectedItem: this.context.selectedFile\r\n        });\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (this.context.selectedFile === null\r\n                && this.context.files.length > 0) {\r\n\r\n            this.context.setSelectedFile(this.context.files[0]);\r\n\r\n            this.setState({\r\n                selectedItem: this.context.files[0]\r\n            });\r\n        }\r\n    }\r\n\r\n    setSelectedItem = (item) => {\r\n        this.context.setSelectedFile(item);\r\n\r\n        this.setState({\r\n            selectedItem: item\r\n        });\r\n    }\r\n\r\n    copyToClipboard = (data, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        copyToClipboard(data.editable);\r\n    }\r\n\r\n    deleteFile = (file, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        let nextFile = this.context.deleteFile(file);\r\n\r\n        if (this.state.selectedItem.id === file.id) {\r\n            this.setState({\r\n                selectedItem: nextFile\r\n            })\r\n        }\r\n    }\r\n\r\n    resetQuestData = () => {\r\n        let data = {...this.context.selectedFile};\r\n\r\n        data.editable = {...this.context.selectedFile.original};\r\n\r\n        console.log(data.editable.title);\r\n\r\n        this.setSelectedItem(data);\r\n    }\r\n\r\n    renderListItems = () => {\r\n        return this.context.files.map( (item) => {\r\n            return (\r\n                <div \r\n                    key = {item.id}\r\n                    onClick = { this.setSelectedItem.bind(this, item) }\r\n                    className = { \r\n                        (this.state.selectedItem.id === item.id) \r\n                        ? 'list-item selected' : 'list-item' }\r\n                >\r\n                    <div className = \"flex-between\">\r\n                        <span className = \"file-name\">{ item.file_name }</span>\r\n                        \r\n                        <div className = \"quick-actions\">\r\n                            <button \r\n                                className = \"copy-button\" \r\n                                onClick = { this.copyToClipboard.bind(this,item) }\r\n                            >\r\n                                Copy\r\n                            </button>\r\n\r\n                            <button \r\n                                className = \"delete-btn\"\r\n                                onClick = {this.deleteFile.bind(this,item)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n    \r\n    render () {\r\n        if (this.context.selectedFile === null \r\n            || this.state.selectedItem === null) {\r\n            return (\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n                    <div>\r\n                        (0) Files Loaded\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className = \"large-view-layout\">\r\n                <div className = \"list-items\">\r\n                    { this.renderListItems() }\r\n                </div>\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n\r\n                    { (this.context.selectedFile.file_type === \"QUEST\") &&\r\n                        <Fragment>\r\n                            <div className = \"original-file-actions\">\r\n                                <button onClick = { this.resetQuestData }>\r\n                                    Reset Quest Data\r\n                                </button>\r\n                                <button \r\n                                    onClick = { () => { this.setState({ viewOriginal: !this.state.viewOriginal }) } }\r\n                                >\r\n                                    { (!this.state.viewOriginal) \r\n                                        ? 'View Original' \r\n                                        : 'Close' \r\n                                    }\r\n                                </button>\r\n                            </div>\r\n\r\n                            { (this.state.viewOriginal) && \r\n                                <QuestContent quest = { this.context.selectedFile.original } />\r\n                            }\r\n\r\n                            <QuestEditForm\r\n                                file = { this.state.selectedItem }\r\n                                deleteFile = { this.context.deleteFile }\r\n                                updateFile = { this.context.updateFile }\r\n                            />\r\n                        </Fragment>\r\n                    }\r\n\r\n                    { (this.context.selectedFile.file_type !== \"QUEST\") &&\r\n                        <Fragment>\r\n                            <FileContent \r\n                                file_name = { this.context.selectedFile.file_name } \r\n                                content = { this.context.selectedFile.editable } \r\n                            />\r\n                        </Fragment>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default LargeViewLayout;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './../quest-details-form';\r\nimport { FileContext } from './../../file-context'; \r\nimport { TopControls } from './../top-controls';\r\nimport copyToClipboard from '../../lib/copy-to-clipboard';\r\n\r\nimport './multi-view.scss';\r\n\r\nclass MultiViewLayout extends Component {\r\n    static contextType = FileContext;\r\n\r\n    renderFilePreviews = () => {\r\n      return this.context.files.map( (data) => {\r\n\r\n        if (data.file_type === \"QUEST\") {\r\n          return (\r\n            <div \r\n                className = \"quest-details-form-wrapper\" \r\n                key = {data.id}\r\n            >\r\n                < QuestDetailsForm \r\n                  data = {data}\r\n                  deleteFile = { this.context.deleteFile }\r\n                  updateFile = { this.context.updateFile }\r\n                  viewSelectedFile = { this.context.viewSelectedFile }\r\n                  viewMode = { this.context.viewMode }\r\n    \r\n                />\r\n              </div>\r\n            )\r\n        }\r\n\r\n        else {\r\n          return (\r\n            <div className = \"other-file-preview\" key = {data.id}>\r\n              <div className = \"space-between\">\r\n                <span className = \"file-name\">{ data.file_name }</span>\r\n                \r\n                <button onClick = { this.context.viewSelectedFile.bind(this, data)}>\r\n                  View File\r\n                </button>\r\n              </div>\r\n              \r\n              <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, data.editable)}>\r\n                Copy\r\n              </button>\r\n              <button className = \"delete-btn\" onClick = { this.context.deleteFile.bind(this, data) }>\r\n                Delete\r\n              </button>\r\n            </div>\r\n          )\r\n        }\r\n      });\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className = \"multi-view\">\r\n                <TopControls />\r\n\r\n                <div className = \"file-previews\">\r\n                  { this.renderFilePreviews() }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MultiViewLayout;","import React, { Component, Fragment, useContext } from 'react';\nimport { FileProvider, FileContext } from './file-context';\nimport LargeViewLayout from './components/layouts/large-view-layout';\nimport MultiViewLayout from './components/layouts/multi-view-layout';\n\nimport './sass/main.scss';\nimport FileImport from './components/file-import';\n\nclass App extends Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n    }\n  }\n\n  render () {\n    return (\n      <FileProvider>\n\n        <Content />\n\n      </FileProvider>\n    );\n  }\n}\n\nlet Content = () => {\n  let context = useContext(FileContext);\n\n  return (\n    <Fragment>\n\n      {(context.files.length < 1) &&\n        <div className = \"large-import\">\n          <FileImport doNotDisplayMessage = { true } />\n        </div>\n      }\n      \n      { (context.files.length > 0) &&\n        <Fragment>\n          { (context.viewMode === 'SINGLE') &&\n            <LargeViewLayout />\n          }\n\n          { (context.viewMode === 'MULTI') &&\n            <MultiViewLayout />\n          }\n        </Fragment>\n      }\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}