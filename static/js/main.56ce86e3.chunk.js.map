{"version":3,"sources":["file-context.js","components/file-import.js","components/top-controls.js","lib/copy-to-clipboard.js","lib/convert-text.js","components/quest-details-form.js","components/quest-edit-form.js","components/quest-content.js","components/file-content.js","components/layouts/large-view-layout.js","components/layouts/multi-view-layout.js","App.js","serviceWorker.js","index.js"],"names":["FileContext","createContext","FileProvider","props","addFile","file","files","state","push","id","ids","setState","setViewMode","viewMode","deleteFile","fileIndex","findIndex","q","splice","length","console","log","selectedFile","updateFile","updateFileDetails","details","editable","setSelectedFile","viewSelectedFile","clearAllFiles","Provider","value","this","children","Component","FileImport","filesLoaded","displayMessage","filesLoadedMessage","filesLoadedSuccess","displayFilesLoadedMessage","message","isSuccess","doNotDisplayMessage","window","setTimeout","loadFiles","document","getElementById","Array","from","reduce","res","index","type","fileReader","FileReader","onload","event","data","target","result","lines","split","payload","file_type","title","fail_condition","monsters","client","fileData","original","file_name","name","context","readAsText","updateFileList","className","htmlFor","onChange","multiple","onClick","contextType","TopControls","useContext","bind","str","prop","Object","prototype","hasOwnProperty","call","copy","convertArrayToFormattedText","arr","text","filter","line","map","convertTextWithoutNewlineToArray","lineLength","maxLineCount","lengthPattern","RegExp","match","slice","convertDetailsToArray","indexOf","convertTextWithNewlineToArray","convertTextToFormattedText","currentLine","i","QuestDetailsForm","addNewLineAtEnd","preventDefault","handleAddNewLineAtPos","pos","addNewLineAtPos","deleteLine","detailsAsText","updateDetailValue","handleImportedDetailsTextField","importedDetailsText","loadDetailsText","copyToClipboard","changeViewMode","renderInputBoxes","key","onFocus","prevProps","FileEditForm","editInputField","propToEdit","quest","FileContent","content","LargeViewLayout","setSelectedItem","item","selectedItem","stopPropagation","nextFile","resetQuestData","renderListItems","viewOriginal","MultiViewLayout","renderFilePreviews","App","Content","href","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56ce86e3.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nexport const FileContext = createContext();\r\n\r\nexport class FileProvider extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            files: [],\r\n            ids: 0,\r\n\r\n            selectedFile: null,\r\n            viewMode: 'SINGLE',\r\n            \r\n            addFile: this.addFile,\r\n            updateFile: this.updateFile,\r\n            updateFileDetails: this.updateFileDetails,\r\n            deleteFile: this.deleteFile,\r\n            clearAllFiles: this.clearAllFiles,\r\n\r\n            setViewMode: this.setViewMode,\r\n            setSelectedFile: this.setSelectedFile,\r\n            viewSelectedFile: this.viewSelectedFile\r\n\r\n        }\r\n    }\r\n\r\n    addFile = (file) => {\r\n        let files = [...this.state.files];\r\n        files.push({id: this.state.ids + 1, ...file});\r\n\r\n        this.setState({\r\n            files: files,\r\n            ids: this.state.ids + 1\r\n        });\r\n    }\r\n\r\n    setViewMode = (viewMode) => {\r\n        this.setState({\r\n            viewMode: viewMode\r\n        })\r\n    }\r\n\r\n    deleteFile = (file) => {\r\n        let files = [...this.state.files];\r\n        let fileIndex = files.findIndex( q => q.id === file.id);\r\n\r\n        files.splice(fileIndex, 1);\r\n\r\n        if (files.length > 0) {\r\n\r\n            console.log(fileIndex + \"/\" + files.length);\r\n\r\n            if (fileIndex === files.length) {\r\n                this.setState({\r\n                    files: files,\r\n                    selectedFile: files[fileIndex - 1]\r\n                });\r\n    \r\n                return files[fileIndex - 1];\r\n            }\r\n            \r\n            this.setState({\r\n                files: files,\r\n                selectedFile: files[fileIndex]\r\n            });\r\n\r\n            return files[fileIndex];\r\n        }\r\n\r\n        this.setState({\r\n            files: [],\r\n            selectedFile: null\r\n        });\r\n\r\n        return null;\r\n    }\r\n\r\n    updateFile = (file) => {\r\n        let files = [...this.state.files];\r\n        let fileIndex = files.findIndex( q => q.id === file.id);\r\n\r\n        files[fileIndex] = file;\r\n\r\n        this.setState({\r\n            files: files\r\n        });\r\n    }\r\n\r\n    updateFileDetails = (details, file) => {\r\n        file.editable.details = details;\r\n\r\n        this.updateFile(file);\r\n    }\r\n\r\n    setSelectedFile = (file) => {\r\n        this.setState({\r\n            selectedFile: file,\r\n            viewMode: 'SINGLE'\r\n        });\r\n    }\r\n\r\n    viewSelectedFile = (file) => {\r\n        this.setSelectedFile(file);\r\n    }\r\n\r\n    clearAllFiles = () => {\r\n        this.setState({\r\n            files: [],\r\n            ids: 0,\r\n\r\n            selectedFile: null\r\n        })\r\n    }\r\n        \r\n    render () {\r\n        return (\r\n            <FileContext.Provider value = {this.state}>\r\n                {this.props.children}\r\n            </FileContext.Provider>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { FileContext } from '../file-context';\r\n\r\nimport './file-import.scss';\r\n\r\nclass FileImport extends Component {\r\n    static contextType = FileContext;\r\n\r\n    state = {\r\n        filesLoaded: [],\r\n        displayMessage: false,\r\n        filesLoadedMessage: '',\r\n        filesLoadedSuccess: false\r\n    }\r\n\r\n    displayFilesLoadedMessage = (message, isSuccess) => {\r\n        if (this.props.doNotDisplayMessage){\r\n            return;\r\n        }\r\n        \r\n        this.setState({\r\n            displayMessage: true,\r\n            filesLoadedMessage: message,\r\n            filesLoadedSuccess: isSuccess\r\n        });\r\n\r\n        window.setTimeout(() => {\r\n            this.setState({\r\n                displayMessage: false,\r\n                filesLoadedMessage: '',\r\n                filesLoadedSuccess: false\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    loadFiles = () => {\r\n        let files = document.getElementById(\"file-import\").files;\r\n\r\n        let fileArray = Array.from(files);\r\n\r\n        fileArray.reduce((res, file, index) => {\r\n            if (file.type === \"text/plain\") {\r\n                let fileReader = new FileReader();\r\n\r\n                fileReader.onload = (event) => {\r\n                    let data = event.target.result;\r\n                \r\n                    const lines = data.split(/\\r\\n|\\n/);\r\n            \r\n                    let payload = data;\r\n                    let file_type = \"DATA\";\r\n            \r\n                    if (lines.length === 6 || lines.length === 7) {\r\n                        payload = {\r\n                            title: lines[0],\r\n                            target: lines[1],\r\n                            fail_condition: lines[2],\r\n                            details: lines[3],\r\n                            monsters: lines[4],\r\n                            client: lines[5]\r\n                        }\r\n            \r\n                        file_type = \"QUEST\";\r\n                    }\r\n            \r\n                    let fileData = {\r\n                        editable: payload,\r\n                        original: {...payload},\r\n                        file_name: file.name,\r\n                        file_type: file_type\r\n                    }\r\n                    \r\n                    this.context.addFile(fileData);\r\n            \r\n                    if (index === this.state.filesLoaded.length - 1) {\r\n                        this.displayFilesLoadedMessage('Files Loaded!', true);\r\n                    }\r\n                }\r\n                \r\n                fileReader.readAsText(file, \"UTF-8\");\r\n            }\r\n\r\n            else {\r\n                if (index === this.state.filesLoaded.length - 1) {\r\n                    this.displayFilesLoadedMessage('Some files failed to load.', false);\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }, []);\r\n    }\r\n\r\n    updateFileList = (event) => {\r\n        let files = event.target.files;\r\n\r\n        this.setState({\r\n            filesLoaded: files\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"file-import\">\r\n                { (this.state.displayMessage) &&\r\n                    <span className = { (this.state.filesLoadedSuccess) \r\n                                            ? \"files-loaded success\" \r\n                                            : \"files-loaded failure\" \r\n                                    }\r\n                    >\r\n                        {this.state.filesLoadedMessage}\r\n                    </span>\r\n                }\r\n                <label htmlFor = \"file-import\" className = \"file-import-inner\">\r\n                    <input \r\n                        type = \"file\" \r\n                        id = \"file-import\" \r\n                        onChange = { this.updateFileList }\r\n                        multiple \r\n                    />\r\n                    Upload Text Files: { this.state.filesLoaded.length } File(s)\r\n                </label>\r\n                { this.state.filesLoaded.length > 0 &&\r\n                    <button onClick = { this.loadFiles }>\r\n                        Import\r\n                    </button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileImport;","import React, { useContext } from 'react';\r\nimport { FileContext } from '../file-context';\r\nimport FileImport from './file-import';\r\n\r\nimport './top-controls.scss';\r\n\r\nexport const TopControls = () => {\r\n    let context = useContext(FileContext);\r\n    \r\n    return (\r\n        <div className = \"top-controls\">\r\n            <div>\r\n                <span className = \"files-loaded\">{ context.files.length } file(s)</span>\r\n                { (context.files.length > 0 && context.viewMode === 'SINGLE') &&\r\n                    <button \r\n                        onClick = { context.setViewMode.bind(this, 'MULTI') }\r\n                        className = \"view-btn\"\r\n                    >\r\n                        View All Files\r\n                    </button>\r\n                }\r\n            </div>\r\n\r\n            <div className = \"side-controls right\">\r\n                <FileImport />\r\n\r\n                { (context.files.length > 0) &&\r\n                    <button className = \"delete-all-btn\" onClick = {context.clearAllFiles}>\r\n                    Delete All Files\r\n                    </button>\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","import copy from \"copy-to-clipboard\";\r\n\r\nexport default (data) => {\r\n    let str = \"\";\r\n\r\n    if (typeof data === \"string\") {\r\n        str = data\r\n    } else {\r\n        for (let prop in data) {\r\n            if (Object.prototype.hasOwnProperty.call(data, prop)) {\r\n                str += data[prop] + \"\\n\";\r\n            }\r\n        }\r\n    }\r\n\r\n    copy(str);\r\n}","export const convertArrayToFormattedText = (arr) => {\r\n    let text = \"\";\r\n\r\n    arr.filter( (line) => line.length > 0 ).map( (line, index) => {\r\n        if (arr.length > 0 && index > 0) {\r\n            text += \"<NEWLINE>\";\r\n        }\r\n\r\n        text += line;\r\n    });\r\n\r\n    return text;\r\n}\r\n\r\nlet convertTextWithoutNewlineToArray = (str, lineLength, maxLineCount) => {\r\n    let lengthPattern = new RegExp(\".{1,\" + lineLength + \"}\", \"g\");\r\n    let lines = str.match(lengthPattern) || [];\r\n\r\n    return lines.slice(0, maxLineCount);\r\n}\r\n\r\nlet convertTextWithNewlineToArray = (str, lineLength) => {\r\n    let lines = str.split(\"<NEWLINE>\");\r\n\r\n    lines = lines.map( (line) => {\r\n        return line.slice(0, lineLength);\r\n    });\r\n\r\n    return lines;\r\n}\r\n\r\nexport const convertDetailsToArray = (str, lineLength, maxLineCount) => {\r\n    if (str.indexOf(\"<NEWLINE>\") > -1)\r\n        return convertTextWithNewlineToArray(str, lineLength);\r\n    \r\n    return convertTextWithoutNewlineToArray(str, lineLength, maxLineCount);\r\n}\r\n\r\nexport const convertTextToFormattedText = (str, lineLength, maxLineCount) => {\r\n    if (str.indexOf(\"<NEWLINE>\") > -1)\r\n        return str;\r\n    \r\n    // Add <NEWLINE> if there is none\r\n    let lines = convertTextWithoutNewlineToArray(str, lineLength, maxLineCount);\r\n    let currentLine = \"\";\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        if (i > 0) {\r\n            currentLine += \"<NEWLINE>\";\r\n        }\r\n        \r\n        currentLine += lines[i];\r\n    }\r\n\r\n    return currentLine;\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport './quest-details-form.scss';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\nimport { convertArrayToFormattedText, convertTextToFormattedText, convertDetailsToArray } from '../lib/convert-text';\r\n\r\nclass QuestDetailsForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            details: this.props.data \r\n                        ? convertDetailsToArray(this.props.data.editable.details, 30, 7) \r\n                        : [],\r\n            detailsAsText: this.props.data.editable \r\n                            ? this.props.data.editable.details \r\n                            : \"\",\r\n            importedDetailsText: \"\",\r\n\r\n            currentLine: -1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.data.id !== prevProps.data.id\r\n            || this.props.data.editable !== prevProps.data.editable) {\r\n\r\n        let lines = this.props.data.editable.details.split(\"<NEWLINE>\");\r\n\r\n        lines = lines.map( (line) => {\r\n            return line.slice(0, 30);\r\n        });\r\n\r\n        this.props.updateFile(this.state.detailsAsText, prevProps.data);\r\n\r\n        this.setState({\r\n          details: lines,\r\n          detailsAsText: this.props.data.editable.details\r\n        });\r\n      }\r\n    }\r\n\r\n    addNewLineAtEnd = (event) => {\r\n        event.preventDefault();\r\n        \r\n        let details = [...this.state.details];\r\n\r\n        details.push(\"\");\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    handleAddNewLineAtPos = (pos, event) => {\r\n        event.preventDefault();\r\n\r\n        this.addNewLineAtPos(pos)\r\n    }\r\n\r\n    addNewLineAtPos = (pos) => {\r\n\r\n        if (this.state.details.length === 7) {\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(pos + 1, 0, \"\");\r\n\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    deleteLine = (index, event) => {\r\n        event.preventDefault();\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(index, 1);\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: convertArrayToFormattedText(details),\r\n            currentLine: -1\r\n        });\r\n    }\r\n\r\n    updateDetailValue = (index, event) => {\r\n        if (event.target.value.length > 30){\r\n            if (this.state.currentLine < 7 \r\n                && this.state.details[this.state.currentLine + 1] !== \"\")\r\n                this.addNewLineAtPos(this.state.currentLine);\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details[index] = event.target.value;\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: convertArrayToFormattedText(details)\r\n        });\r\n\r\n        this.props.updateFile(this.state.detailsAsText, this.props.data);\r\n\r\n    }\r\n\r\n    handleImportedDetailsTextField = (event) => {\r\n        this.setState({\r\n            importedDetailsText: event.target.value\r\n        });\r\n    }\r\n\r\n    loadDetailsText = () => {\r\n        this.setState({\r\n            details: convertDetailsToArray(this.state.importedDetailsText, 30, 7),\r\n            detailsAsText: convertTextToFormattedText(this.state.importedDetailsText, 30, 7)\r\n        });\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        copyToClipboard({...this.props.data.editable, details: this.state.detailsAsText});\r\n    }\r\n    \r\n    changeViewMode = () => {\r\n        this.props.viewSelectedFile({\r\n                                        ...this.props.data, \r\n                                        editable: {\r\n                                                    ...this.props.data.editable, \r\n                                                    details: this.state.detailsAsText\r\n                                                  }\r\n                                    });\r\n    }\r\n\r\n    renderInputBoxes = () => {\r\n        return this.state.details.map( (line, index) => {\r\n\r\n            return (\r\n                <label key = {index}>\r\n                    <input\r\n                        type = \"text\" \r\n                        onClick = { () => { this.setState({ currentLine: index }) } }\r\n                        onFocus = { () => { this.setState({ currentLine: index }) } }\r\n                        onChange = {this.updateDetailValue.bind(this, index)} \r\n                        value = {this.state.details[index]}\r\n                    />\r\n                    <div className = \"bottom-controls\">\r\n                        <span className = \"character-counter\">{this.state.details[index].length + \"/30\" }</span>\r\n                        \r\n                        <div className = \"side-controls\">\r\n                            { (this.state.details.length < 7 && this.state.currentLine === index) && \r\n                                <button \r\n                                    onClick = {this.handleAddNewLineAtPos.bind(this, index)}\r\n                                    className = \"add-line-below\"\r\n                                >\r\n                                    Add Line Below\r\n                                </button>\r\n                            }\r\n\r\n                            <button \r\n                                className = \"delete-btn\" \r\n                                onClick = {this.deleteLine.bind(this, index)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </label>\r\n            );\r\n\r\n        });\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className = { (this.props.viewMode === \"MULTI\") \r\n                                ? \"quest-details-form multi\" \r\n                                : \"quest-details-form\"\r\n                            }>\r\n                { (this.props.viewMode === \"MULTI\") &&\r\n                    <div className = \"top-bar\">\r\n                        <div className = \"title\">\r\n                            { this.props.data.editable.title }\r\n                        </div>\r\n                    \r\n                        <div className = \"bottom-details\">\r\n                            <span className = \"file-name\">{this.props.data.file_name}</span>\r\n                            <div className = \"side-controls\">\r\n                            \r\n                                    <Fragment>\r\n                                        <button onClick = { this.changeViewMode }>\r\n                                            Edit File\r\n                                        </button>\r\n\r\n                                        <button \r\n                                            className = \"delete-btn\"\r\n                                            onClick = { this.props.deleteFile.bind(this, this.props.data) }\r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                    </Fragment>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                \r\n                <div className = \"space-between\">\r\n                    <div className = \"line-counter\">\r\n                        { this.state.details.length + \"/7\"} Lines\r\n                    </div>\r\n\r\n                    <div className = \"buttons-wrapper\">\r\n                        { (this.state.details.length < 7) &&\r\n                            (\r\n                                <button \r\n                                    className = \"add-line\" \r\n                                    onClick = { this.addNewLineAtEnd }\r\n                                >\r\n                                    Add Line\r\n                                </button>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <form className = \"details-input-boxes\">\r\n                    { this.renderInputBoxes() }\r\n                    \r\n                    { (this.state.details.length < 7) &&\r\n                        (\r\n                            <button \r\n                                className = \"add-line\" \r\n                                onClick = { this.addNewLineAtEnd }\r\n                            >\r\n                                Add Line\r\n                            </button>\r\n                        )\r\n                    }\r\n                </form>\r\n\r\n                <label className = \"load-quest-details\">\r\n                    <p>\r\n                        To edit existing file details text instead, simply copy & paste it into the box below:\r\n                    </p>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.handleImportedDetailsTextField } \r\n                        value = { this.state.importedDetailsText } \r\n                    />\r\n                    <button \r\n                        className = \"load-new-details\" \r\n                        onClick = { this.loadDetailsText }\r\n                    >\r\n                        Edit File Details\r\n                    </button>\r\n                </label>\r\n                \r\n                { this.state.detailsAsText.length > 0 && \r\n                    (\r\n                        <div className = \"plain-text-wrapper\">\r\n                            <code>\r\n                                {this.props.data.editable.title}\r\n                                    <br/>\r\n                                {this.props.data.editable.target}\r\n                                    <br/>\r\n                                {this.props.data.editable.fail_condition}\r\n                                    <br/>\r\n                                {this.state.detailsAsText}\r\n                                    <br/>\r\n                                {this.props.data.editable.monsters}\r\n                                    <br/>\r\n                                {this.props.data.editable.client}\r\n                            </code>\r\n\r\n                            <button className = \"copy-btn\" onClick = { this.copyToClipboard }>Copy</button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestDetailsForm;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './quest-details-form';\r\nimport {FileContext} from './../file-context';\r\n\r\nimport './quest-edit-form.scss';\r\nimport { throwStatement } from '@babel/types';\r\n\r\nclass FileEditForm extends Component {\r\n    static contextType = FileContext;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n\r\n        this.state = {\r\n            file: this.props.file\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.file.id !== this.state.file.id \r\n                || this.props.file.editable !== this.state.file.editable ) {\r\n            this.setState({\r\n                file: this.props.file\r\n            });\r\n        }\r\n    }\r\n\r\n    editInputField = (propToEdit, event) => {\r\n        let fileData = {...this.props.file};\r\n\r\n        fileData.editable[propToEdit] = event.target.value;\r\n\r\n        this.setState({\r\n            file: fileData\r\n        });\r\n\r\n        this.context.updateFile(fileData);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"file-form\">\r\n                <h1 className = \"top\">\r\n                    <span>Edit File</span> \r\n                    <span className = \"file-name\">{ this.state.file.file_name}</span>\r\n                </h1>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">File Title</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"title\")}\r\n                        value = { this.state.file.editable.title }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">File Target</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"target\")}\r\n                        value = { this.state.file.editable.target }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Fail Condition</div>\r\n                    <p>{ this.state.file.editable.fail_condition }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Monsters</div>\r\n                    <p>{ this.state.file.editable.monsters }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Client</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"client\")}\r\n                        value = { this.state.file.editable.client }\r\n                    />\r\n                </label>\r\n\r\n                <div className = \"field-name\">Quest Details</div>\r\n                <QuestDetailsForm\r\n                    data = { this.state.file }\r\n                    updateFile = { this.context.updateFileDetails }\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileEditForm;","import React from 'react';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\nimport './quest-content.scss';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className = \"quest-content\">\r\n            <h1 className = \"top\">\r\n                Original File\r\n            </h1>\r\n            <div className = \"item\">\r\n                <h1>Quest Title</h1>\r\n                <p>{ props.quest.title }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Quest Target</h1>\r\n                <p>{ props.quest.target }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Fail Condition</h1>\r\n                <p>{ props.quest.fail_condition }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Quest Details</h1>\r\n                <p>{ props.quest.details }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Monsters</h1>\r\n                <p>{ props.quest.monsters }</p>\r\n            </div>\r\n            <div className = \"item\">\r\n                <h1>Client</h1>\r\n                <p>{ props.quest.client }</p>\r\n            </div>\r\n            \r\n            <div className = \"buttons\">\r\n                <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, props.quest) }>Copy</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport copyToClipboard from '../lib/copy-to-clipboard';\r\n\r\nimport './file-content.scss';\r\n\r\nexport const FileContent = (props) => {\r\n    let renderStringWithNewlines = (str) => {\r\n        return str.split(/\\r\\n|\\n/).map( (line, index) => {\r\n            return (<p key = {index}>{ line }</p>);\r\n        });\r\n    }\r\n    return (\r\n        <div className = \"file-content\">\r\n            <h1 className = \"top\">\r\n                <span>View File</span> \r\n                <span className = \"file-name\">\r\n                    { props.file_name}\r\n                </span>\r\n            </h1>\r\n\r\n            <code className = \"file-content-data\">\r\n               {renderStringWithNewlines(props.content)}\r\n            </code>\r\n            <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, props.content) }>\r\n                Copy\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, { Component, Fragment } from 'react';\r\nimport './large-view-layout.scss';\r\nimport { TopControls } from './../top-controls';\r\nimport QuestEditForm from '../quest-edit-form';\r\nimport QuestContent from '../quest-content';\r\nimport { FileContext } from './../../file-context';\r\nimport copyToClipboard from '../../lib/copy-to-clipboard';\r\nimport { FileContent } from '../file-content';\r\n \r\nclass LargeViewLayout extends Component {\r\n\r\n    static contextType = FileContext;\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedItem: null,\r\n            viewOriginal: false\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.setState({\r\n            selectedItem: this.context.selectedFile\r\n        });\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (this.context.selectedFile === null\r\n                && this.context.files.length > 0) {\r\n\r\n            this.context.setSelectedFile(this.context.files[0]);\r\n\r\n            this.setState({\r\n                selectedItem: this.context.files[0]\r\n            });\r\n        }\r\n    }\r\n\r\n    setSelectedItem = (item) => {\r\n        this.context.setSelectedFile(item);\r\n\r\n        this.setState({\r\n            selectedItem: item\r\n        });\r\n    }\r\n\r\n    copyToClipboard = (data, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        copyToClipboard(data.editable);\r\n    }\r\n\r\n    deleteFile = (file, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        let nextFile = this.context.deleteFile(file);\r\n\r\n        if (this.state.selectedItem.id === file.id) {\r\n            this.setState({\r\n                selectedItem: nextFile\r\n            })\r\n        }\r\n    }\r\n\r\n    resetQuestData = () => {\r\n        let data = {...this.context.selectedFile};\r\n\r\n        data.editable = {...this.context.selectedFile.original};\r\n\r\n        console.log(data.editable.title);\r\n\r\n        this.setSelectedItem(data);\r\n    }\r\n\r\n    renderListItems = () => {\r\n        return this.context.files.map( (item) => {\r\n            return (\r\n                <div \r\n                    key = {item.id}\r\n                    onClick = { this.setSelectedItem.bind(this, item) }\r\n                    className = { \r\n                        (this.state.selectedItem.id === item.id) \r\n                        ? 'list-item selected' : 'list-item' }\r\n                >\r\n                    <div className = \"flex-between\">\r\n                        <span className = \"file-name\">{ item.file_name }</span>\r\n                        \r\n                        <div className = \"quick-actions\">\r\n                            <button \r\n                                className = \"copy-button\" \r\n                                onClick = { this.copyToClipboard.bind(this,item) }\r\n                            >\r\n                                Copy\r\n                            </button>\r\n\r\n                            <button \r\n                                className = \"delete-btn\"\r\n                                onClick = {this.deleteFile.bind(this,item)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n    \r\n    render () {\r\n        if (this.context.selectedFile === null \r\n            || this.state.selectedItem === null) {\r\n            return (\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n                    <div>\r\n                        (0) Files Loaded\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className = \"large-view-layout\">\r\n                <div className = \"list-items\">\r\n                    { this.renderListItems() }\r\n                </div>\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n\r\n                    { (this.context.selectedFile.file_type === \"QUEST\") &&\r\n                        <Fragment>\r\n                            <div className = \"original-file-actions\">\r\n                                <button onClick = { this.resetQuestData }>\r\n                                    Reset Quest Data\r\n                                </button>\r\n                                <button \r\n                                    onClick = { () => { this.setState({ viewOriginal: !this.state.viewOriginal }) } }\r\n                                >\r\n                                    { (!this.state.viewOriginal) \r\n                                        ? 'View Original' \r\n                                        : 'Close' \r\n                                    }\r\n                                </button>\r\n                            </div>\r\n\r\n                            { (this.state.viewOriginal) && \r\n                                <QuestContent quest = { this.context.selectedFile.original } />\r\n                            }\r\n\r\n                            <QuestEditForm\r\n                                file = { this.state.selectedItem }\r\n                                deleteFile = { this.context.deleteFile }\r\n                                updateFile = { this.context.updateFile }\r\n                            />\r\n                        </Fragment>\r\n                    }\r\n\r\n                    { (this.context.selectedFile.file_type !== \"QUEST\") &&\r\n                        <Fragment>\r\n                            <FileContent \r\n                                file_name = { this.context.selectedFile.file_name } \r\n                                content = { this.context.selectedFile.editable } \r\n                            />\r\n                        </Fragment>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default LargeViewLayout;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './../quest-details-form';\r\nimport { FileContext } from './../../file-context'; \r\nimport { TopControls } from './../top-controls';\r\nimport copyToClipboard from '../../lib/copy-to-clipboard';\r\n\r\nimport './multi-view.scss';\r\n\r\nclass MultiViewLayout extends Component {\r\n    static contextType = FileContext;\r\n\r\n    renderFilePreviews = () => {\r\n      return this.context.files.map( (data) => {\r\n\r\n        if (data.file_type === \"QUEST\") {\r\n          return (\r\n            <div \r\n                className = \"quest-details-form-wrapper\" \r\n                key = {data.id}\r\n            >\r\n                < QuestDetailsForm \r\n                  data = {data}\r\n                  deleteFile = { this.context.deleteFile }\r\n                  updateFile = { this.context.updateFile }\r\n                  viewSelectedFile = { this.context.viewSelectedFile }\r\n                  viewMode = { this.context.viewMode }\r\n    \r\n                />\r\n              </div>\r\n            )\r\n        }\r\n\r\n        else {\r\n          return (\r\n            <div className = \"other-file-preview\" key = {data.id}>\r\n              <div className = \"space-between\">\r\n                <span className = \"file-name\">{ data.file_name }</span>\r\n                \r\n                <button onClick = { this.context.viewSelectedFile.bind(this, data)}>\r\n                  View File\r\n                </button>\r\n              </div>\r\n              \r\n              <button className = \"copy-btn\" onClick = { copyToClipboard.bind(this, data.editable)}>\r\n                Copy\r\n              </button>\r\n              <button className = \"delete-btn\" onClick = { this.context.deleteFile.bind(this, data) }>\r\n                Delete\r\n              </button>\r\n            </div>\r\n          )\r\n        }\r\n      });\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className = \"multi-view\">\r\n                <TopControls />\r\n\r\n                <div className = \"file-previews\">\r\n                  { this.renderFilePreviews() }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MultiViewLayout;","import React, { Component, Fragment, useContext } from 'react';\nimport { FileProvider, FileContext } from './file-context';\nimport LargeViewLayout from './components/layouts/large-view-layout';\nimport MultiViewLayout from './components/layouts/multi-view-layout';\n\nimport './sass/main.scss';\nimport FileImport from './components/file-import';\n\nclass App extends Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n    }\n  }\n\n  render () {\n    return (\n      <FileProvider>\n\n        <Content />\n\n      </FileProvider>\n    );\n  }\n}\n\nlet Content = () => {\n  let context = useContext(FileContext);\n\n  return (\n    <Fragment>\n\n      {(context.files.length < 1) &&\n        <div className = \"large-import\">\n          <div className = \"about\">\n            <h1 className = \"top\">\n              MHP3rd String Table Editor\n            </h1>\n            <div className = \"text-details\">\n              A simple web editor for working with Monster Hunter Portable 3rd string table text files.\n                <br />\n              Use this tool to edit quest string table files or preview other string tables (base, extras, npc dialogue)\n                <br />\n                <br />\n              Files Supported: *.txt\n                <br />\n                <br />\n              credit: codestation for mhtools | <a href = \"https://github.com/codestation/mhtools\">Available Here</a>\n            </div>\n          </div>\n          <FileImport doNotDisplayMessage = { true } />\n        </div>\n      }\n      \n      { (context.files.length > 0) &&\n        <Fragment>\n          { (context.viewMode === 'SINGLE') &&\n            <LargeViewLayout />\n          }\n\n          { (context.viewMode === 'MULTI') &&\n            <MultiViewLayout />\n          }\n        </Fragment>\n      }\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}