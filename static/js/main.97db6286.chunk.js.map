{"version":3,"sources":["quest-context.js","components/quest-import.js","components/top-controls.js","components/quest-details-form.js","components/quest-edit-form.js","components/layouts/large-view-layout.js","components/layouts/multi-view-layout.js","App.js","serviceWorker.js","index.js"],"names":["QuestContext","createContext","QuestProvider","props","addQuest","quest","quests","state","push","id","ids","setState","setViewMode","viewMode","deleteQuest","questIndex","findIndex","q","splice","length","selectedQuest","updateQuest","updateQuestDetails","details","editable","setSelectedQuest","viewSelectedQuest","clearAllQuests","Provider","value","this","children","Component","QuestImport","filesLoaded","loadFiles","files","document","getElementById","Array","from","map","file","index","fileRead","FileReader","onload","event","lines","target","result","split","lineData","title","fail_condition","monsters","client","file_name","name","questData","original","context","readAsText","updateFileList","className","htmlFor","type","onChange","multiple","onClick","contextType","TopControls","useContext","bind","QuestDetailsForm","addNewLineAtEnd","preventDefault","handleAddNewLineAtPos","pos","addNewLineAtPos","deleteLine","detailsAsText","convertDetailsToPlainText","currentLine","updateDetailValue","data","handleImportedDetailsTextField","importedDetailsText","loadDetailsText","convertDetailsToArray","text","filter","line","detailsStr","slice","copyToClipboard","copy","changeViewMode","renderInputBoxes","key","onFocus","prevProps","QuestEditForm","editInputField","propToEdit","LargeViewLayout","setSelectedItem","item","selectedItem","stopPropagation","formattedData","nextQuest","renderListItems","MultiViewLayout","renderQuestDetailsForm","App","Content","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97db6286.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nexport const QuestContext = createContext();\r\n\r\nexport class QuestProvider extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quests: [],\r\n            ids: 0,\r\n\r\n            selectedQuest: null,\r\n            viewMode: 'SINGLE',\r\n            \r\n            addQuest: this.addQuest,\r\n            updateQuest: this.updateQuest,\r\n            updateQuestDetails: this.updateQuestDetails,\r\n            deleteQuest: this.deleteQuest,\r\n            clearAllQuests: this.clearAllQuests,\r\n\r\n            setViewMode: this.setViewMode,\r\n            setSelectedQuest: this.setSelectedQuest,\r\n            viewSelectedQuest: this.viewSelectedQuest\r\n\r\n        }\r\n    }\r\n\r\n    addQuest = (quest) => {\r\n        let quests = [...this.state.quests];\r\n        quests.push({id: this.state.ids + 1, ...quest});\r\n\r\n        this.setState({\r\n            quests: quests,\r\n            ids: this.state.ids + 1\r\n        });\r\n    }\r\n\r\n    setViewMode = (viewMode) => {\r\n        this.setState({\r\n            viewMode: viewMode\r\n        })\r\n    }\r\n\r\n    deleteQuest = (quest) => {\r\n        let quests = [...this.state.quests];\r\n        let questIndex = quests.findIndex( q => q.id === quest.id);\r\n\r\n        quests.splice(questIndex, 1);\r\n\r\n        if (quests.length > 0) {\r\n            this.setState({\r\n                quests: quests,\r\n                selectedQuest: quests[questIndex]\r\n            });\r\n\r\n            return quests[questIndex];\r\n        }\r\n\r\n        this.setState({\r\n            quests: [],\r\n            selectedQuest: null\r\n        });\r\n\r\n        return null;\r\n    }\r\n\r\n    updateQuest = (quest) => {\r\n        let quests = [...this.state.quests];\r\n        let questIndex = quests.findIndex( q => q.id === quest.id);\r\n\r\n        quests[questIndex] = quest;\r\n\r\n        this.setState({\r\n            quests: quests\r\n        });\r\n    }\r\n\r\n    updateQuestDetails = (details, quest) => {\r\n        quest.editable.details = details;\r\n\r\n        this.updateQuest(quest);\r\n    }\r\n\r\n    setSelectedQuest = (quest) => {\r\n        this.setState({\r\n            selectedQuest: quest,\r\n            viewMode: 'SINGLE'\r\n        });\r\n    }\r\n\r\n    viewSelectedQuest = (quest) => {\r\n        this.setSelectedQuest(quest);\r\n    }\r\n\r\n    clearAllQuests = () => {\r\n        this.setState({\r\n            quests: [],\r\n            ids: 0,\r\n\r\n            selectedQuest: null\r\n        })\r\n    }\r\n        \r\n    render () {\r\n        return (\r\n            <QuestContext.Provider value = {this.state}>\r\n                {this.props.children}\r\n            </QuestContext.Provider>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { QuestContext } from '../quest-context';\r\n\r\nclass QuestImport extends Component {\r\n    static contextType = QuestContext;\r\n\r\n    state = {\r\n        filesLoaded: []\r\n    }\r\n\r\n    loadFiles = () => {\r\n        let files = document.getElementById(\"file-import\").files;\r\n    \r\n        Array.from(files).map((file, index) => {\r\n          let fileRead = new FileReader();\r\n    \r\n          fileRead.onload = (event) => {\r\n            let data = event.target.result;\r\n    \r\n            const lines = data.split(/\\r\\n|\\n/);\r\n            \r\n            let lineData = {\r\n              title: lines[0],\r\n              target: lines[1],\r\n              fail_condition: lines[2],\r\n              details: lines[3],\r\n              monsters: lines[4],\r\n              client: lines[5],\r\n              file_name: file.name\r\n            }\r\n\r\n            let questData = {\r\n                editable: lineData,\r\n                original: lineData\r\n            }\r\n            \r\n            this.context.addQuest(questData);\r\n          }\r\n          \r\n          fileRead.readAsText(file, \"UTF-8\");\r\n        });\r\n    }\r\n\r\n    updateFileList = (event) => {\r\n        let files = event.target.files;\r\n\r\n        this.setState({\r\n            filesLoaded: files\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"import-btn-wrapper\">\r\n                <label htmlFor = \"file-import\" className = \"file-import\">\r\n                    <input \r\n                        type = \"file\" \r\n                        id = \"file-import\" \r\n                        onChange = { this.updateFileList }\r\n                        multiple \r\n                    />\r\n                    Upload Text Files: { this.state.filesLoaded.length } File(s)\r\n                </label>\r\n                { this.state.filesLoaded.length > 0 &&\r\n                    <button onClick = { this.loadFiles }>Import</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestImport;","import React, { useContext } from 'react';\r\nimport { QuestContext } from '../quest-context';\r\nimport QuestImport from './quest-import';\r\n\r\nimport './top-controls.scss';\r\n\r\nexport const TopControls = () => {\r\n    let context = useContext(QuestContext);\r\n    \r\n    return (\r\n        <div className = \"top-controls\">\r\n            { (context.quests.length > 0 && context.viewMode === 'SINGLE') &&\r\n                <button \r\n                    onClick = { context.setViewMode.bind(this, 'MULTI') }\r\n                    className = \"view-btn\"\r\n                >\r\n                    View All Quests\r\n                </button>\r\n            }\r\n\r\n            <div className = \"side-controls right\">\r\n                <QuestImport />\r\n\r\n                { (context.quests.length > 0) &&\r\n                    <button className = \"delete-all-btn\" onClick = {context.clearAllQuests}>\r\n                    Delete All Quests\r\n                    </button>\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","import React, { Component, Fragment } from 'react';\r\nimport copy from 'copy-to-clipboard';\r\nimport './quest-details-form.scss';\r\n\r\nclass QuestDetailsForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            details: this.props.data \r\n                        ? this.convertDetailsToArray(this.props.data.editable.details) \r\n                        : [],\r\n            detailsAsText: this.props.data.editable \r\n                            ? this.props.data.editable.details \r\n                            : \"\",\r\n            importedDetailsText: \"\",\r\n\r\n            currentLine: -1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.data.id !== prevProps.data.id) {\r\n\r\n        let lines = this.props.data.editable.details.split(\"<NEWLINE>\");\r\n\r\n        lines = lines.map( (line, index) => {\r\n            return line.slice(0, 30);\r\n        });\r\n\r\n        this.props.updateQuest(this.state.detailsAsText, prevProps.data);\r\n\r\n        this.setState({\r\n          details: lines,\r\n          detailsAsText: this.props.data.editable.details\r\n        });\r\n      }\r\n    }\r\n\r\n    addNewLineAtEnd = (event) => {\r\n        event.preventDefault();\r\n        \r\n        let details = [...this.state.details];\r\n\r\n        details.push(\"\");\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    handleAddNewLineAtPos = (pos, event) => {\r\n        event.preventDefault();\r\n\r\n        this.addNewLineAtPos(pos)\r\n    }\r\n\r\n    addNewLineAtPos = (pos) => {\r\n\r\n        if (this.state.details.length === 7) {\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(pos + 1, 0, \"\");\r\n\r\n        this.setState({\r\n            details: details\r\n        });\r\n    }\r\n\r\n    deleteLine = (index, event) => {\r\n        event.preventDefault();\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details.splice(index, 1);\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: this.convertDetailsToPlainText(details),\r\n            currentLine: -1\r\n        });\r\n    }\r\n\r\n    updateDetailValue = (index, event) => {\r\n        if (event.target.value.length > 30){\r\n            if (this.state.currentLine < 7 \r\n                && this.state.details[this.state.currentLine + 1] !== \"\")\r\n                this.addNewLineAtPos(this.state.currentLine);\r\n            return;\r\n        }\r\n\r\n        let details = [...this.state.details];\r\n\r\n        details[index] = event.target.value;\r\n\r\n        this.setState({\r\n            details: details,\r\n            detailsAsText: this.convertDetailsToPlainText(details)\r\n        });\r\n\r\n        this.props.updateQuest(this.state.detailsAsText, this.props.data);\r\n\r\n    }\r\n\r\n    handleImportedDetailsTextField = (event) => {\r\n        this.setState({\r\n            importedDetailsText: event.target.value\r\n        });\r\n    }\r\n\r\n    loadDetailsText = () => {\r\n        this.setState({\r\n            details: this.convertDetailsToArray(this.state.importedDetailsText),\r\n            detailsAsText: this.state.importedDetailsText\r\n        });\r\n    }\r\n\r\n    convertDetailsToPlainText = (details) => {\r\n        let text = \"\";\r\n\r\n        details.filter( (line) => line.length > 0 ).map( (line, index) => {\r\n            if (details.length > 0 && index > 0) {\r\n                text += \"<NEWLINE>\";\r\n            }\r\n\r\n            text += line;\r\n        });\r\n\r\n        return text;\r\n    }\r\n\r\n    convertDetailsToArray = (detailsStr) => {\r\n        let lines = detailsStr.split(\"<NEWLINE>\");\r\n\r\n        lines = lines.map( (line) => {\r\n            return line.slice(0, 30);\r\n        });\r\n\r\n        return lines;\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        let data = this.props.data.editable.title             + \"\\n\"\r\n                    + this.props.data.editable.target         + \"\\n\"\r\n                    + this.props.data.editable.fail_condition + \"\\n\"\r\n                    + this.state.detailsAsText                + \"\\n\"\r\n                    + this.props.data.editable.monsters       + \"\\n\"\r\n                    + this.props.data.editable.client         + \"\\n\";\r\n\r\n        copy(data);\r\n    }\r\n    \r\n    changeViewMode = () => {\r\n        this.props.viewSelectedQuest({...this.props.data, editable: {...this.props.data.editable, details: this.state.detailsAsText}});\r\n    }\r\n\r\n    renderInputBoxes = () => {\r\n        return this.state.details.map( (line, index) => {\r\n\r\n            return (\r\n                <label key = {index}>\r\n                    <input\r\n                        type = \"text\" \r\n                        onClick = { () => { this.setState({ currentLine: index }) } }\r\n                        onFocus = { () => { this.setState({ currentLine: index }) } }\r\n                        onChange = {this.updateDetailValue.bind(this, index)} \r\n                        value = {this.state.details[index]}\r\n                    />\r\n                    <div className = \"bottom-controls\">\r\n                        <span className = \"character-counter\">{this.state.details[index].length + \"/30\" }</span>\r\n                        \r\n                        <div className = \"side-controls\">\r\n                            { (this.state.details.length < 7 && this.state.currentLine === index) && \r\n                                <button \r\n                                    onClick = {this.handleAddNewLineAtPos.bind(this, index)}\r\n                                    className = \"add-line-below\"\r\n                                >\r\n                                    Add Line Below\r\n                                </button>\r\n                            }\r\n\r\n                            <button \r\n                                className = \"delete-btn\" \r\n                                onClick = {this.deleteLine.bind(this, index)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </label>\r\n            );\r\n\r\n        });\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <div className = { (this.props.viewMode === \"MULTI\") \r\n                                ? \"quest-details-form multi\" \r\n                                : \"quest-details-form\"\r\n                            }>\r\n                <div className = \"top\">\r\n                    { (this.props.viewMode === 'MULTI') &&\r\n                        <Fragment>\r\n                            <div className = \"title\">\r\n                                { this.props.data.editable.title }\r\n                            </div>\r\n                        </Fragment>\r\n                    }\r\n                    \r\n                    <div className = \"bottom-details\">\r\n                        <span>{this.props.data.editable.file_name}</span>\r\n\r\n                        <div className = \"side-controls\">\r\n                            { (this.props.viewMode === \"MULTI\") &&\r\n                                <Fragment>\r\n                                    <button onClick = { this.changeViewMode }>\r\n                                        Edit Quest\r\n                                    </button>\r\n\r\n                                    <button \r\n                                        className = \"delete-btn\"\r\n                                        onClick = { this.props.deleteQuest.bind(this, this.props.data) }\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </Fragment>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className = \"top-controls\">\r\n                    <div className = \"line-counter\">\r\n                        { this.state.details.length + \"/7\"}\r\n                    </div>\r\n\r\n                    <div className = \"buttons-wrapper\">\r\n                        { (this.state.details.length < 7) &&\r\n                            (\r\n                                <button \r\n                                    className = \"add-line\" \r\n                                    onClick = { this.addNewLineAtEnd }\r\n                                >\r\n                                    Add Line\r\n                                </button>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <form className = \"details-input-boxes\">\r\n                    { this.renderInputBoxes() }\r\n                    \r\n                    { (this.state.details.length < 7) &&\r\n                        (\r\n                            <button \r\n                                className = \"add-line\" \r\n                                onClick = { this.addNewLineAtEnd }\r\n                            >\r\n                                Add Line\r\n                            </button>\r\n                        )\r\n                    }\r\n                </form>\r\n\r\n                <label className = \"load-quest-details\">\r\n                    <p>\r\n                        If you want to edit preformatted quest details text instead, simply copy & paste it into the box below:\r\n                    </p>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.handleImportedDetailsTextField } \r\n                        value = { this.state.importedDetailsText } \r\n                    />\r\n                    <button \r\n                        className = \"load-new-details\" \r\n                        onClick = { this.loadDetailsText }\r\n                    >\r\n                        Load Quest Details\r\n                    </button>\r\n                </label>\r\n                \r\n                { this.state.detailsAsText.length > 0 && \r\n                    (\r\n                        <div className = \"plain-text-wrapper\">\r\n                            <code>\r\n                                {this.props.data.editable.title}\r\n                                    <br/>\r\n                                {this.props.data.editable.target}\r\n                                    <br/>\r\n                                {this.props.data.editable.fail_condition}\r\n                                    <br/>\r\n                                {this.state.detailsAsText}\r\n                                    <br/>\r\n                                {this.props.data.editable.monsters}\r\n                                    <br/>\r\n                                {this.props.data.editable.client}\r\n                            </code>\r\n\r\n                            <button className = \"copy-btn\" onClick = { this.copyToClipboard }>Copy</button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestDetailsForm;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './quest-details-form';\r\nimport {QuestContext} from './../quest-context';\r\n\r\nimport './quest-edit-form.scss';\r\n\r\nclass QuestEditForm extends Component {\r\n    static contextType = QuestContext;\r\n\r\n    constructor (props) {\r\n        super (props);\r\n\r\n        this.state = {\r\n            quest: this.props.quest\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.quest.id !== this.state.quest.id) {\r\n            this.setState({\r\n                quest: this.props.quest\r\n            });\r\n        }\r\n    }\r\n\r\n    editInputField = (propToEdit, event) => {\r\n        let questData = {...this.props.quest};\r\n\r\n        questData.editable[propToEdit] = event.target.value;\r\n\r\n        this.setState({\r\n            quest: questData\r\n        });\r\n\r\n        this.context.updateQuest(questData);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"quest-form\">\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Quest Title</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"title\")}\r\n                        value = { this.state.quest.editable.title }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Quest Target</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"target\")}\r\n                        value = { this.state.quest.editable.target }\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Fail Condition</div>\r\n                    <p>{ this.state.quest.editable.fail_condition }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Monsters</div>\r\n                    <p>{ this.state.quest.editable.monsters }</p>\r\n                </label>\r\n\r\n                <label>\r\n                    <div className = \"field-name\">Client</div>\r\n                    <input \r\n                        type = \"text\" \r\n                        onChange = { this.editInputField.bind(this, \"client\")}\r\n                        value = { this.state.quest.editable.client }\r\n                    />\r\n                </label>\r\n\r\n                <QuestDetailsForm\r\n                    data = { this.state.quest }\r\n                    updateQuest = { this.context.updateQuestDetails }\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestEditForm;","import React, { Component } from 'react';\r\nimport './large-view-layout.scss';\r\nimport { TopControls } from './../top-controls';\r\nimport QuestEditForm from '../quest-edit-form';\r\nimport { QuestContext } from './../../quest-context';\r\n\r\nimport copy from 'copy-to-clipboard';\r\n \r\nclass LargeViewLayout extends Component {\r\n\r\n    static contextType = QuestContext;\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedItem: null\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.setState({\r\n            selectedItem: this.context.selectedQuest\r\n        });\r\n    }\r\n\r\n    componentDidUpdate () {\r\n\r\n        if (this.context.selectedQuest === null\r\n                && this.context.quests.length > 0) {\r\n\r\n            this.context.setSelectedQuest(this.context.quests[0]);\r\n\r\n            this.setState({\r\n                selectedItem: this.context.quests[0]\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    setSelectedItem = (item) => {\r\n        this.context.setSelectedQuest(item);\r\n\r\n        this.setState({\r\n            selectedItem: item\r\n        });\r\n    }\r\n\r\n    copyToClipboard = (data, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        let formattedData = data.editable.title    + \"\\n\"\r\n                    + data.editable.target         + \"\\n\"\r\n                    + data.editable.fail_condition + \"\\n\"\r\n                    + data.editable.details        + \"\\n\"\r\n                    + data.editable.monsters       + \"\\n\"\r\n                    + data.editable.client         + \"\\n\";\r\n\r\n        copy(formattedData);\r\n    }\r\n\r\n    deleteQuest = (quest, event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        let nextQuest = this.context.deleteQuest(quest);\r\n\r\n        if (this.state.selectedItem.id === quest.id) {\r\n            this.setState({\r\n                selectedItem: nextQuest\r\n            })\r\n        }\r\n    }\r\n\r\n    renderListItems = () => {\r\n        return this.context.quests.map( (item) => {\r\n            return (\r\n                <div \r\n                    key = {item.id}\r\n                    onClick = { this.setSelectedItem.bind(this, item) }\r\n                    className = { \r\n                        (this.state.selectedItem.id === item.id) \r\n                        ? 'list-item selected' : 'list-item' }\r\n                >\r\n                    <div className = \"flex-between\">\r\n                        <span>{ item.editable.file_name }</span>\r\n                        \r\n                        <div className = \"quick-actions\">\r\n                            <button \r\n                                className = \"copy-button\" \r\n                                onClick = { this.copyToClipboard.bind(this,item) }\r\n                            >\r\n                                Copy\r\n                            </button>\r\n\r\n                            <button \r\n                                className = \"delete-btn\"\r\n                                onClick = {this.deleteQuest.bind(this,item)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n    \r\n    render () {\r\n        if (this.context.selectedQuest === null \r\n            || this.state.selectedItem === null) {\r\n            return (\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n                    <div>\r\n                        (0) Quests Loaded\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className = \"large-view-layout\">\r\n                <div className = \"list-items\">\r\n                    { this.renderListItems() }\r\n                </div>\r\n                <div className = \"content\">\r\n                    <TopControls />\r\n\r\n                    <QuestEditForm\r\n                        quest = { this.state.selectedItem }\r\n                        deleteQuest = { this.context.deleteQuest }\r\n                        updateQuest = { this.context.updateQuest }\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default LargeViewLayout;","import React, { Component } from 'react';\r\nimport QuestDetailsForm from './../quest-details-form';\r\nimport { QuestContext } from './../../quest-context'; \r\nimport { TopControls } from './../top-controls';\r\n\r\nclass MultiViewLayout extends Component {\r\n    static contextType = QuestContext;\r\n\r\n    renderQuestDetailsForm = () => {\r\n      return this.context.quests.map( (data) => {\r\n        return (\r\n          <div \r\n            className = \"quest-details-form-wrapper\" \r\n            key = {data.id}\r\n        >\r\n            <QuestDetailsForm \r\n              data = {data}\r\n              deleteQuest = { this.context.deleteQuest }\r\n              updateQuest = { this.context.updateQuest }\r\n              viewSelectedQuest = { this.context.viewSelectedQuest }\r\n              viewMode = { this.context.viewMode }\r\n\r\n            />\r\n          </div>\r\n        )\r\n      });\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div>\r\n                <TopControls />\r\n\r\n                { this.renderQuestDetailsForm() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MultiViewLayout;","import React, { Component, Fragment, useContext } from 'react';\nimport { QuestProvider, QuestContext } from './quest-context';\nimport LargeViewLayout from './components/layouts/large-view-layout';\nimport MultiViewLayout from './components/layouts/multi-view-layout';\n\nimport './sass/main.scss';\nimport QuestImport from './components/quest-import';\n\nclass App extends Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n    }\n  }\n\n  render () {\n    return (\n      <QuestProvider>\n\n        <Content />\n\n      </QuestProvider>\n    );\n  }\n}\n\nlet Content = () => {\n  let context = useContext(QuestContext);\n\n  return (\n    <Fragment>\n\n      {(context.quests.length < 1) &&\n        <div className = \"large-import\">\n          <QuestImport />\n        </div>\n      }\n      \n      { (context.quests.length > 0) &&\n        <Fragment>\n          { (context.viewMode === 'SINGLE') &&\n            <LargeViewLayout />\n          }\n\n          { (context.viewMode === 'MULTI') &&\n            <MultiViewLayout />\n          }\n        </Fragment>\n      }\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}